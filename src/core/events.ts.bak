// Backup of original TypeScript file
import type { POI } from '../../types';

export type EventMap = {
  'mouse:move': { x: number; y: number };
  'poi:selected': POI;
  'frame': { time: number };
};

class EventBus {
  private listeners: Map<keyof EventMap, Set<(data: any) => void>> = new Map();

  on<K extends keyof EventMap>(event: K, handler: (data: EventMap[K]) => void): void {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, new Set());
    }
    this.listeners.get(event)!.add(handler);
  }

  off<K extends keyof EventMap>(event: K, handler: (data: EventMap[K]) => void): void {
    this.listeners.get(event)?.delete(handler);
  }

  emit<K extends keyof EventMap>(event: K, data: EventMap[K]): void {
    this.listeners.get(event)?.forEach(fn => fn(data));
  }
}

export const events = new EventBus();
